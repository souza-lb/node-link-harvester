#!/bin/bash

# node-link-harvester (Coletor de link do node)
# Autor: Leonardo Bruno
# Contato: souzalb@proton.me
# Vers√£o: 1.0
# Data: 04/07/2025

# Verifica se o wget est√° instalado
if ! command -v wget &> /dev/null; then
    echo "‚ùå Erro: O comando 'wget' n√£o est√° instalado."
    echo "Por favor instale o wget para continuar:"
    echo ""
    echo "üì¶ Para sistemas baseados em Debian/Ubuntu:"
    echo "  sudo apt-get install wget"
    echo ""
    echo "üì¶ Para sistemas baseados em RHEL/CentOS:"
    echo "  sudo yum install wget"
    echo ""
    echo "üì¶ Para sistemas baseados em Arch:"
    echo "  sudo pacman -S wget"
    echo ""
    echo "üì¶ Para macOS (via Homebrew):"
    echo "  brew install wget"
    exit 1
fi

# Pasta base onde as vers√µes do node est√£o hospedadas
BASE_URL="https://nodejs.org/dist/"

# Extens√£o dos arquivos para busca (Bin√°rios Linux 64 bit)
EXTENSION="linux-x64.tar.xz"

# Arquivo para armazenamento da lista com links
OUTPUT_FILE="link-node.txt"

# Vers√£o m√≠nima para listagem (Vers√µes anteriores a essa ser√£o ignoradas)
MIN_VERSION="v0.12.14"

# Limpeza do arquivo de sa√≠da (Cria um arquivo vazio ou sobrescreve o existente)
> "$OUTPUT_FILE"

# Mensagem inicial
echo "üöÄ Iniciando busca em: $BASE_URL"
echo "üîç Procurando por arquivos .${EXTENSION} a partir da vers√£o ${MIN_VERSION}"
echo "‚è≥ Aguarde alguns instantes..."
echo "üìÅ Processando: ${BASE_URL}"

# Arquivo tempor√°rio para links encontrados
temp_links=$(mktemp)

# Arquivo temporario vers√µes processadas para ordena√ß√£o
temp_sorted=$(mktemp)

# Captura todas as vers√µes dispon√≠veis na p√°gina informada
mapfile -t versions < <(wget -qO- --compress=auto "$BASE_URL" | grep -oE 'href="v[0-9]+\.[0-9]+\.[0-9]+/"' | sed 's/href="//;s/"//g')

# Loop para tratamento no array com as vers√µes encontradas
total_files=0
for version in "${versions[@]}"; do
    # Remo√ß√£o da barra no final do nome da vers√£o (ex: 'v18.18.2/' -> 'v18.18.2')
    version_clean=${version%/}

    # Checa se a vers√£o atual √© maior ou igual √† vers√£o m√≠nima definida
    if [[ "$(printf '%s\n' "$MIN_VERSION" "$version_clean" | sort -V | head -n1)" != "$MIN_VERSION" ]]; then
        # Se a vers√£o for menor que a m√≠nima, pula para a pr√≥xima
        continue
    fi
    
    # Constroi a URL completa para o arquivo
    full_url="${BASE_URL}${version}node-${version_clean}-${EXTENSION}"

    # Verifica se a URL segue o padr√£o esperado antes de adicionar
    if [[ "$full_url" == *node-v[0-9]*.*.*-linux-x64.tar.xz ]]; then
        # Adiciona a URL v√°lida ao arquivo tempor√°rio
        echo "$full_url" >> "$temp_links"
        # Incrementa o contador de arquivos
        ((total_files++))
    fi
done

# Processa cada link para cria√ß√£o de vers√£o orden√°vel
while IFS= read -r url; do
    # Extrai a vers√£o do nome do arquivo na URL (ex: 'v18.18.2')
    version=$(basename "$url" | grep -oE 'v[0-9]+\.[0-9]+\.[0-9]+')
    # Remove o 'v' inicial e substitui pontos por espa√ßos para ordena√ß√£o num√©rica
    sortable_version=$(echo "${version#v}" | tr '.' ' ')
    # Formata: [vers√£o_orden√°vel] + [tab] + [URL original]
    echo -e "$sortable_version\t$url"
done < "$temp_links" > "$temp_sorted"

# Ordena as vers√µes numericamente (menor para maior)
echo "üìä Ordenando resultados..."
# Ordena considerando os tr√™s componentes de vers√£o (major.minor.patch)
sort -k1,1n -k2,2n -k3,3n "$temp_sorted" | cut -f2- > "$OUTPUT_FILE"

# Conta quantas URLs foram salvas no arquivo final
total_files_after=$(wc -l < "$OUTPUT_FILE")

# Exibe os links encontrados de forma formatada
echo ""
echo "üìã Lista de links ordenados:"
while IFS= read -r link; do
    echo "  ‚úÖ $link"
done < "$OUTPUT_FILE"

# Limpeza arquivos tempor√°rios
rm "$temp_links" "$temp_sorted"

# Exibe o relat√≥rio final
echo ""
echo "‚úÖ Busca conclu√≠da!"
echo "================================="
echo "üì¶ Arquivos encontrados:    $total_files"
echo "üîß Ap√≥s remover duplicatas: $total_files_after"
echo "üíæ Links salvos em:         $OUTPUT_FILE"
echo "================================="
